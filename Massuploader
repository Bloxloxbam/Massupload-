<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="The best js uploading tool for roblox.">
    <meta property="og:title" content="MassRBX">
    <meta property="og:description" content="The best js uploading tool for roblox.">
    <meta property="og:image" content="https://cdn.glitch.global/aaecbe2d-8b6d-40df-adbb-f2d5604103d9/KITTY!!!!!!!.png?v=1716307746456">
    <meta property="og:url" content="https://massrbx.glitch.me/">
    <meta property="og:type" content="website">
    <title>MassRBX</title>
    <link rel="stylesheet" href="style.css">
    <style>
        body {
            display: flex;
            margin: 0;
            font-family: Arial, sans-serif;
        }
        .sidebar {
            width: 250px;
            height: 100vh;
            background-color: #333;
            color: white;
            padding: 20px;
            box-sizing: border-box;
            position: fixed;
            overflow-y: auto;
        }
        .content {
            margin-left: 250px;
            padding: 20px;
            width: 100%;
        }
        .sidebar a {
            color: white;
            text-decoration: none;
            display: block;
            margin: 10px 0;
        }
        .sidebar a:hover {
            text-decoration: underline;
        }
        .sidebar h2 {
            margin-top: 0;
        }
    </style>
</head>
<body>
    <div class="sidebar">
        <h2>MassRBX</h2>
        <input type="text" id="ui" placeholder="Enter your userid">
        <input type="text" id="ai" placeholder="Enter roblox api key">
        <p id="apikeyshow">APIKEY: -</p>
        <p id="useridshow">USERID: -</p>
        <button id="setkeys">Set Keys</button>
        <p>Dot Size: <output id="dotSizeValue">3</output></p>
        <input type="range" id="dotSizeSlider" name="dotSizeSlider" min="1" max="25" value="3">
        <p>Noise: <output id="noiseValue">0</output></p>
        <input type="range" id="noiseSlider" name="noiseSlider" min="0" max="100" value="0">
        <p>Width: <input type="text" id="widthInput" value="512"></p>
        <p>Height: <input type="text" id="heightInput" value="512"></p>
        <div>
            <button id="preset1">1000x350</button>
            <button id="preset2">350x70</button>
        </div>
        <div>
            <input type="checkbox" id="overlayCheckbox">
            <label for="overlayCheckbox">Tag</label>
        </div>
        <button id="start">Start</button>
        <a href="https://discord.gg/qEC8N7yAMb">Cerebral Incubation</a>
        <a href="https://cdn.glitch.global/aaecbe2d-8b6d-40df-adbb-f2d5604103d9/Screen%20recording%202024-05-21%2011.50.09%20AM.webm?v=1716306797721">TUTORIAL!</a>
    </div>
    <div class="content">
        <br><br>
        <input id="thefile" type="file" accept=".png, .jpg, .jpeg, .tga, .bmp">
        <form>
            <label for="uploads">Upload Type:</label>
            <select id="uploads" name="uploads">
                <option value="decal">Decal</option>
                <option value="tshirt">T-Shirt</option>
            </select>
        </form>
        <form>
            <label for="effects">Method:</label>
            <select id="effects" name="effects">
                <option value="noise">Noise</option>
                <option value="random-pixel">Random Pixel</option>
            </select>
        </form>
        <canvas id="canvas"></canvas>
        <div id="logs-container">
            <div id="logs"></div>
        </div>
    </div>

    <script>
        const dotSizeSlider = document.getElementById('dotSizeSlider');
        const dotSizeValue = document.getElementById('dotSizeValue');
        let dotsize = 3;
        let noiseslider = 0;
        let widthset = 512;
        let heightset = 512;
        let overlayEnabled = false;

        dotSizeSlider.addEventListener('input', () => {
            dotSizeValue.textContent = dotSizeSlider.value;
            dotsize = dotSizeSlider.value;
        });
        dotSizeValue.textContent = dotSizeSlider.value;

        const noiseSlider = document.getElementById('noiseSlider');
        const noiseValue = document.getElementById('noiseValue');
        noiseSlider.addEventListener('input', () => {
            noiseValue.textContent = noiseSlider.value;
            noiseslider = noiseSlider.value;
        });
        noiseValue.textContent = noiseSlider.value;

        const widthInput = document.getElementById('widthInput');
        const heightInput = document.getElementById('heightInput');

        widthInput.addEventListener('input', () => {
            widthset = widthInput.value;
        });

        heightInput.addEventListener('input', () => {
            heightset = heightInput.value;
        });

        const overlayCheckbox = document.getElementById('overlayCheckbox');
        overlayCheckbox.addEventListener('change', () => {
            overlayEnabled = overlayCheckbox.checked;
        });

        function log(text) {
            const last = document.getElementById("logs").innerHTML;
            document.getElementById("logs").innerHTML = text + "<br>" + last;
        }

        let apikey = "";
        let userid = "";
        let running = false;
        let count = 1;

        function saveKeysToLocalStorage() {
            localStorage.setItem('apikey', apikey);
            localStorage.setItem('userid', userid);
        }

        function loadKeysFromLocalStorage() {
            const savedApikey = localStorage.getItem('apikey');
            const savedUserid = localStorage.getItem('userid');
            apikey = savedApikey;
            userid = savedUserid;
            document.getElementById("apikeyshow").textContent = "APIKEY: " + apikey;
            document.getElementById("useridshow").textContent = "USERID: " + userid;
        }

        document.getElementById("setkeys").addEventListener("click", function() {
            apikey = document.getElementById("ai").value;
            userid = document.getElementById("ui").value;
            document.getElementById("apikeyshow").textContent = "APIKEY: " + apikey;
            document.getElementById("useridshow").textContent = "USERID: " + userid;
            saveKeysToLocalStorage();
        });

        document.getElementById("start").addEventListener("click", function() {
            running = !running;
            if (running) {
                log("Started!");
                document.getElementById("start").textContent = "Stop";
            } else {
                log("Stopped!");
                document.getElementById("start").textContent = "Start";
            }
        });

        async function delay(ms) {
            await new Promise(resolve => setTimeout(resolve, ms));
        }

        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');

        async function main() {
            while (true) {
                if (!running) {
                    await delay(100);
                    continue;
                }
                
                const selectElement = document.getElementById('uploads');
                const selectedOption = selectElement.value;

                const input = document.getElementById("thefile");
                if (input.files.length > 0) {
                    log("Uploading image " + String(count));

                    const file = input.files[0];
                    const reader = new FileReader();

                    reader.onload = async function (e) {
                        const img = new Image();
                        img.onload = function () {
                            canvas.width = widthset;
                            canvas.height = heightset;

                            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
                            const x = Math.floor(Math.random() * canvas.width);
                            const y = Math.floor(Math.random() * canvas.height);

                            ctx.fillStyle = 'black';
                            ctx.beginPath();
                            ctx.arc(x, y, dotsize, 0, Math.PI * 2);
                            ctx.fill();

                            const effectSelect = document.getElementById('effects');
                            const selectedEffect = effectSelect.value;

                            if (selectedEffect === 'noise') {
                                applyNoiseEffect();
                            } else if (selectedEffect === 'random-pixel') {
                                applyRandomPixelEffect();
                            }

                            if (overlayEnabled) {
                                const overlayImg = new Image();
                                overlayImg.src = 'https://cdn.glitch.global/1942c0b0-2792-4b29-aed9-e7c7ddf1d0dd/required.png?v=1716293742655';
                                overlayImg.onload = function () {
                                    ctx.drawImage(overlayImg, 0, 0, canvas.width, canvas.height);
                                };
                            }
                        };
                        img.src = e.target.result;
                    };
                    reader.readAsDataURL(file);

                    let modifiedBlob = await new Promise(resolve => {
                        canvas.toBlob(blob => {
                            resolve(blob);
                        }, 'image/png');
                    });

                    const formData = new FormData();
                    formData.append('fileContent', modifiedBlob, 'ready.png');

                    const headers = {
                        'x-api-key': apikey,
                    };
                    let as = "Decal";
                    let used = "k уѕ degen mass method";

                    if (selectedOption === "tshirt") {
                        as = "Tshirt";
                        used = "k уѕ degen mass method";
                    }

                    const data = JSON.stringify({
                        assetType: as,
                        displayName: used,
                        description: 'gg/qEC8N7yAMb',
                        creationContext: {
                            creator: {
                                userId: userid.toString()
                            }
                        }
                    });

                    formData.append("request", data);

                    const url = 'https://apis.roblox.com/assets/v1/assets';

                    try {
                        const response = await fetch(url, {
                            method: 'POST',
                            headers: headers,
                            body: formData,
                        });

                        if (response.ok) {
                            const responseData = await response.json();
                            log('Image Uploaded Successfully');
                            count += 1;
                        } else {
                            let statusText = "Unknown Error check inspect for details";
                            if (response.status === 429) {
                                statusText = "Uploading too many images, just wait a bit, this will go away soon.";
                            }
                            if (response.status === 401) {
                                statusText = "Account got a WARNING! Click reactivate account and it will work again.";
                            }
                            log('Failed to upload asset: ' + statusText);
                        }

                    } catch (err) {
                        log("Error uploading asset: " + err.toString());
                    }

                } else {
                    log("No File!");
                    await delay(50);
                }
                await delay(50);
            }
        }

        function applyRandomPixelEffect() {
            const noiseLevel = noiseslider / 100;
            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            const data = imageData.data;

            for (let i = 0; i < data.length; i += 4) {
                if (Math.random() < noiseLevel) {
                    data[i] = Math.floor(Math.random() * 256);
                    data[i + 1] = Math.floor(Math.random() * 256); 
                    data[i + 2] = Math.floor(Math.random() * 256);
                }
            }

            ctx.putImageData(imageData, 0, 0);
        }

        function applyNoiseEffect() {
            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            const data = imageData.data;

            for (let i = 0; i < data.length; i += 4) {
                if (Math.random() < 0.05) {
                    data[i] = Math.floor(Math.random() * 256);
                    data[i + 1] = Math.floor(Math.random() * 256); 
                    data[i + 2] = Math.floor(Math.random() * 256);
                }
            }

            ctx.putImageData(imageData, 0, 0);
        }

        main();
        loadKeysFromLocalStorage();

        document.getElementById("preset1").addEventListener("click", function() {
            widthInput.value = "1000";
            heightInput.value = "350";
            widthset = 1000;
            heightset = 350;
        });

        document.getElementById("preset2").addEventListener("click", function() {
            widthInput.value = "350";
            heightInput.value = "70";
            widthset = 350;
            heightset = 70;
        });
    </script>
</body>
</html>
